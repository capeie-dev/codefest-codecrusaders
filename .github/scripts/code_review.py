import os
import json
import requests
from openai import OpenAI

def get_pr_diff(pr_number):
    """Get the PR diff from GitHub API"""
    token = os.environ['GITHUB_TOKEN']
    repo = os.environ['GITHUB_REPOSITORY']
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3.diff'
    }
    url = f'https://api.github.com/repos/{repo}/pulls/{pr_number}'
    response = requests.get(url, headers=headers)
    return response.text

def analyze_code_changes(diff_text):
    """Analyze code changes using OpenAI API, excluding .github folder changes"""
    # Filter out changes from .github folder
    filtered_diff_lines = []
    current_file = None
    skip_current = False
    changed_files = set()
    changed_lines = 0
    
    for line in diff_text.split('\n'):
        if line.startswith('diff --git'):
            current_file = line.split()[2][2:]  # Get the b/ filename
            skip_current = current_file.startswith('.github/')
            if not skip_current:
                changed_files.add(current_file)
        elif not skip_current and (line.startswith('+') or line.startswith('-')):
            changed_lines += 1
        if not skip_current:
            filtered_diff_lines.append(line)
    
    filtered_diff = '\n'.join(filtered_diff_lines)
    
    # If there are no changes after filtering, return a message
    if not filtered_diff.strip():
        return "No changes found outside of the .github folder."
    
    # Determine number of points based on changes
    num_points = min(max(2, len(changed_files) + changed_lines // 10), 8)
    
    client = OpenAI(api_key=os.environ['OPENAI_API_KEY'])
    
    prompt = f"""
    You are a code review assistant. Follow these instructions strictly:
    
    1) **Findings**  
       - Split the combined diff below into sections by file.  
         Each fileâ€™s section begins with a line matching `diff --git a/...<FileName>.java`.  
       - Under each file heading, list exactly {num_points} findings.  
       - **Every** finding **must** begin with one of these tags in square brackets:  
         [DOC_MISSING], [NULL_ISSUE], [OPTIMIZE], [BEST_PRACTICE]  
       - Format each finding as:
         - [TAG] Short title: concise description.
    
    2) **Recommendations for Code Optimization:**  
       - List all optimization suggestions (e.g., eliminate redundancy, improve algorithms).  
       - If there are none, write exactly `None`.
    
    3) **Recommendations for Best Practices:**  
       - List all best-practice suggestions (e.g., naming, formatting, documentation, error handling).  
       - If there are none, write exactly `None`.
    
    ---
    
    Here is the combined diff for multiple files. Use it to isolate each file:
    
    ```diff
    {filtered_diff}

    """
    
    return response.choices[0].message.content


def post_pr_comment(pr_number, comment):
    """Post a comment on the PR"""
    token = os.environ['GITHUB_TOKEN']
    repo = os.environ['GITHUB_REPOSITORY']
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    url = f'https://api.github.com/repos/{repo}/issues/{pr_number}/comments'
    data = {'body': comment}
    response = requests.post(url, headers=headers, json=data)
    return response.json()

def main():
    # Get PR number from GitHub event
    with open(os.environ['GITHUB_EVENT_PATH']) as f:
        event = json.load(f)
    pr_number = event['pull_request']['number']

    # Get PR diff
    diff = get_pr_diff(pr_number)
    
    # Analyze changes
    analysis = analyze_code_changes(diff)
    
    # Format comment
    comment = f"""## ðŸ¤– Code Review Bot Analysis

{analysis}

---
*This is an automated code review summary generated by AI.*"""
    
    # Post comment
    post_pr_comment(pr_number, comment)

if __name__ == "__main__":
    main()
