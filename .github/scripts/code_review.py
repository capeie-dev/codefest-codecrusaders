import os
import json
import requests
from openai import OpenAI

def get_pr_diff(pr_number):
    """Get the PR diff from GitHub API"""
    token = os.environ['GITHUB_TOKEN']
    repo = os.environ['GITHUB_REPOSITORY']
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3.diff'
    }
    url = f'https://api.github.com/repos/{repo}/pulls/{pr_number}'
    response = requests.get(url, headers=headers)
    return response.text

def analyze_code_changes(diff_text):
    """Analyze code changes using OpenAI API, excluding .github folder changes"""
    # Filter out changes from .github folder
    filtered_diff_lines = []
    current_file = None
    skip_current = False
    changed_files = set()
    changed_lines = 0
    
    for line in diff_text.split('\n'):
        if line.startswith('diff --git'):
            current_file = line.split()[2][2:]  # Get the b/ filename
            skip_current = current_file.startswith('.github/')
            if not skip_current:
                changed_files.add(current_file)
        elif not skip_current and (line.startswith('+') or line.startswith('-')):
            changed_lines += 1
        if not skip_current:
            filtered_diff_lines.append(line)
    
    filtered_diff = '\n'.join(filtered_diff_lines)
    
    # If there are no changes after filtering, return a message
    if not filtered_diff.strip():
        return "No changes found outside of the .github folder."
    
    # Determine number of points based on changes
    num_points = min(max(2, len(changed_files) + changed_lines // 10), 8)
    
    client = OpenAI(api_key=os.environ['OPENAI_API_KEY'])
    
    prompt = f"""You are a code review assistant.
    
    You will receive a unified diff from a GitHub pull request that includes changes across one or more source code files. Your task is to review the diff and provide structured feedback grouped by file and also an overall summary.
    
    ## For each file, output exactly this structure:
    
    <file name>  
    Changes (null checks):  
    - Bullet points describing null safety issues (if any)  
    
    Changes (missing docs):  
    - Bullet points describing missing or inadequate JavaDocs (if any)  
    
    Changes (bad coding practice):  
    - Bullet points describing issues like poor naming, missing logging, bad patterns, etc.  
    
    Recommendation (coding optimization):  
    - Bullet points suggesting how to improve performance or maintainability.  
    
    Use bullet points in each section. If nothing applies, write: `None`.  
    **Use only the file name (e.g., `HotelController.java`)**, not the full path.
    
    Avoid repeating the same issue in both the file section and the summary unless it's high priority.
    
    ## After listing files, include this at the end:
    
    **Overall Diff Summary**  
    Changes (null checks):  
    - List affected files and a 1-line summary of issues  
    
    Changes (missing docs):  
    - List affected files and methods missing docs  
    
    Changes (bad coding practice):  
    - List affected files with one-line descriptions of problems  
    
    Recommendation (coding optimization):  
    - List optimization opportunities across files  
    
    ---
    
    Here is the diff to review:
    
    ```diff
    {filtered_diff}
    ```"""
    # âœ… DEBUG: Show prompt preview in GitHub Actions logs
    print("PROMPT PREVIEW START\n" + prompt[:1000] + "\nPROMPT PREVIEW END")
    
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a code review assistant. Provide concise, technical analysis of code changes."},
            {"role": "user", "content": prompt}
        ]
    )
    
    return response.choices[0].message.content

def post_pr_comment(pr_number, comment):
    """Post a comment on the PR"""
    token = os.environ['GITHUB_TOKEN']
    repo = os.environ['GITHUB_REPOSITORY']
    headers = {
        'Authorization': f'token {token}',
        'Accept': 'application/vnd.github.v3+json'
    }
    url = f'https://api.github.com/repos/{repo}/issues/{pr_number}/comments'
    data = {'body': comment}
    response = requests.post(url, headers=headers, json=data)
    return response.json()

def main():
    # Get PR number from GitHub event
    with open(os.environ['GITHUB_EVENT_PATH']) as f:
        event = json.load(f)
    pr_number = event['pull_request']['number']

    # Get PR diff
    diff = get_pr_diff(pr_number)
    
    # Analyze changes
    analysis = analyze_code_changes(diff)
    
    # Format comment
    comment = f"""## ðŸ¤– Code Review Bot Analysis

{analysis}

---
*This is an automated code review summary generated by AI.*"""
    
    # Post comment
    post_pr_comment(pr_number, comment)

if __name__ == "__main__":
    main()
